name: Add issue/discussion to Project v2

on:
  issues:
    types: [opened]
  discussion:
    types: [created]

permissions:
  issues: write
  discussions: write

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    env:
      PROJECT_NUMBER: 21
      PROJECT_SCOPE: organization
      PROJECT_TOKEN: ${{ secrets.PROJECT_TOKEN }}

    steps:
      - name: Adicionar issue/discuss√£o ao Project v2 da AusTV
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const owner = context.repo.owner;
              const repo = context.repo.repo;

              let contentNodeId = null;
              if (context.payload.issue) {
                contentNodeId = context.payload.issue.node_id;
                console.log('Event: issue opened, node_id=', contentNodeId);
              } else if (context.payload.discussion) {
                contentNodeId = context.payload.discussion.node_id;
                console.log('Event: discussion created, node_id=', contentNodeId);
              } else {
                console.log('No issue or discussion found in payload; exiting.');
                return;
              }

              if (!contentNodeId) throw new Error('Content node id not found in payload');

              const projectNumber = parseInt(process.env.PROJECT_NUMBER, 10);
              if (!projectNumber || isNaN(projectNumber)) {
                throw new Error('PROJECT_NUMBER not set to a valid number.');
              }

              async function callGraphQL(query, variables) {
                if (!process.env.PROJECT_TOKEN) {
                  return await github.graphql(query, variables);
                }
                const url = 'https://api.github.com/graphql';
                const res = await github.request({
                  method: 'POST',
                  url,
                  headers: {
                    authorization: `bearer ${process.env.PROJECT_TOKEN}`,
                    'content-type': 'application/json'
                  },
                  data: { query, variables }
                });
                return res.data;
              }

              // Buscar o projeto
              let project = null;
              if ((process.env.PROJECT_SCOPE || 'repository').toLowerCase() === 'organization') {
                const query = `query($org:String!, $number:Int!){ organization(login:$org){ projectV2(number:$number){ id title } } }`;
                const qres = await callGraphQL(query, { org: owner, number: projectNumber });
                project = qres.data?.organization?.projectV2;
              } else {
                const query = `query($owner:String!, $repo:String!, $number:Int!){ repository(owner:$owner, name:$repo){ projectV2(number:$number){ id title } } }`;
                const qres = await callGraphQL(query, { owner, repo, number: projectNumber });
                project = qres.data?.repository?.projectV2;
              }

              if (!project?.id) throw new Error('Project v2 not found.');

              console.log('Found project:', project.title);

              // Adicionar item
              const mutation = `mutation($projectId:ID!, $contentId:ID!){ addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item{ id } } }`;
              const mres = await callGraphQL(mutation, { projectId: project.id, contentId: contentNodeId });
              console.log('Item added to project:', mres);
            } catch (err) {
              console.log('Error:', err.message || err);
              throw err;
            }
